/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

buildscript {
    repositories {
		maven {
			url 'https://repository.liferay.com/nexus/content/groups/liferay-ce'
		}
    }
    dependencies {
		classpath group: 'com.liferay', name: 'com.liferay.gradle.plugins.source.formatter', version: '1.0.1'
    }
}

plugins {
	id "com.jfrog.bintray" version "1.3"
	id 'com.github.johnrengelman.shadow' version '1.2.2'
}

version = '0.22.0'
group = 'com.liferay.launchpad'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'

apply plugin: 'com.jfrog.bintray'
apply from: "${rootProject.projectDir}/gradle/bintray.gradle"


allprojects {
	repositories {
		jcenter()
		mavenLocal()
		mavenCentral()
	}
}

ext {
	lib = [
		junit: 'junit:junit:4.12',
        jsonassert : 'org.skyscreamer:jsonassert:1.2.3'
	]
}

/**
 * Global IntelliJ configuration.
 */
idea {
	module {
		excludeDirs += file('.idea')
	}
}

/**
 * Subprojects configuration.
 */
subprojects {
	apply plugin: 'java'
	apply plugin: 'com.liferay.source.formatter'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	compileJava.options.fork = true

	test {
		reports.html.enabled = false
	}

	tasks.withType(Test) { testTask ->
		configure(testTask) {
			beforeTest { descriptor ->
				logger.lifecycle("\t" + descriptor)
			}
		}
	}

	idea {
		module {
			inheritOutputDirs true
		}
	}
}

def shadowBaseName = 'api'
def projectNamesToInclude = [':api', ':api-query', ':sdk', ':serializer']
def projectsToInclude = projectNamesToInclude.collect {project(it)}

configurations {
	published
}

dependencies {
	projectsToInclude.each {compile it}
}

// shadow

shadowJar {
	baseName = shadowBaseName
	classifier = ''
}

task shadowSourceJar(type: Jar, dependsOn: shadowJar) {
  baseName = shadowBaseName
  classifier = 'sources'

  projectsToInclude.each {from it.sourceSets.main.allSource}
}

// install & publish

install {
    repositories.mavenInstaller {
		// artifact filtering
		pom.whenConfigured {
			p -> p.dependencies = p.dependencies.findAll { dep -> false }
		}
	}
}

artifacts {
	published shadowJar
	published shadowSourceJar
}

task version() {
	println "----------"
	println rootProject.name
	println version
	println "----------"
}

/**
 * Gradle wrapper.
 */
task wrapper(type: Wrapper) {
	gradleVersion = '2.5'
}
